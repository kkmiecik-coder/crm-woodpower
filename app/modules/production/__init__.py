# modules/production/__init__.py
"""
Modu≈Ç Produkcyjny - Wood Power CRM
Odpowiedzialny za zarzƒÖdzanie produkcjƒÖ lat drewnianych na stanowiskach sklejania i pakowania
"""

from flask import Blueprint
import logging

# Utworzenie Blueprint dla modu≈Çu production
production_bp = Blueprint(
    "production", 
    __name__,
    template_folder="templates",
    static_folder="static",
    url_prefix="/production"
)

# Konfiguracja loggera dla modu≈Çu production
production_logger = logging.getLogger('production')

# Import routingu po utworzeniu Blueprint (unikamy circular imports)
from . import routers

# Import funkcji pakowania z utils
try:
    from .utils import (
        calculate_packaging_priority,
        format_packaging_deadline,
        validate_packaging_order,
        sort_packaging_queue,
        calculate_packaging_stats_summary,
        format_packaging_duration,
        generate_packaging_report_data
    )
    production_logger.info("‚úÖ Funkcje pakowania zaimportowane pomy≈õlnie")
except ImportError as e:
    production_logger.warning(f"‚ö†Ô∏è B≈ÇƒÖd importu funkcji pakowania: {str(e)}")

def register_packaging_routes():
    """
    Rejestruje dodatkowe routing'i dla pakowania
    """
    # Routing'i pakowania sƒÖ ju≈º zarejestrowane w routers.py
    # Ta funkcja jest dla ewentualnych przysz≈Çych rozszerze≈Ñ
    
    # Logowanie zarejestrowanych endpoint'√≥w pakowania
    packaging_routes = [
        '/work/packaging',
        '/api/packaging/queue', 
        '/api/packaging/complete/<int:order_id>',
        '/api/packaging/stats'
    ]
    
    production_logger.info(
        f"Zarejestrowano {len(packaging_routes)} routing'√≥w pakowania"
    )
    
    return True

def verify_packaging_database_setup():
    """
    Sprawdza czy baza danych ma wymagane tabele i kolumny dla pakowania
    """
    try:
        from .models import ProductionOrderSummary, ProductionItem
        
        # Sprawd≈∫ czy tabele istniejƒÖ i majƒÖ wymagane kolumny
        required_columns = {
            'production_orders_summary': [
                'packaging_status', 
                'all_items_glued',
                'total_items_count',
                'completed_items_count'
            ],
            'production_items': [
                'packaging_started_at',
                'packaging_completed_at'
            ]
        }
        
        # W rzeczywistej aplikacji mo≈ºna dodaƒá sprawdzenie struktury bazy
        # Na razie tylko logujemy informacjƒô
        
        production_logger.info(
            "Sprawdzono strukturƒô bazy danych dla pakowania"
        )
        
        return True
        
    except Exception as e:
        production_logger.error(f"B≈ÇƒÖd sprawdzania struktury bazy dla pakowania: {str(e)}")
        return False

def initialize_production_module():
    """
    Inicjalizuje ca≈Çy modu≈Ç produkcyjny
    """
    try:
        production_logger.info("üöÄ Inicjalizacja modu≈Çu produkcyjnego...")
        
        # Zarejestruj routing'i pakowania
        register_packaging_routes()
        
        # Sprawd≈∫ strukturƒô bazy danych
        verify_packaging_database_setup()
        
        return True
        
    except Exception as e:
        production_logger.error(f"‚ùå B≈ÇƒÖd inicjalizacji modu≈Çu produkcyjnego: {str(e)}")
        return False

# Wywo≈Çaj inicjalizacjƒô modu≈Çu
try:
    initialize_production_module()
except Exception as e:
    production_logger.error(f"Krytyczny b≈ÇƒÖd inicjalizacji: {str(e)}")

# Eksportujemy Blueprint i kluczowe funkcje dla ≈Çatwego importu w g≈Ç√≥wnej aplikacji
__all__ = [
    'production_bp',
    'production_logger',
    'initialize_production_module',
    'register_packaging_routes',
    'verify_packaging_database_setup'
]