# test_logging.py
"""
Skrypt testowy do sprawdzenia dzia≈Çania nowego systemu logowania
Uruchom z katalogu g≈Ç√≥wnego aplikacji: python test_logging.py
"""

import os
import sys
from datetime import datetime

# Dodaj ≈õcie≈ºkƒô do modu≈Ç√≥w
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

def test_logging_system():
    """Test podstawowej funkcjonalno≈õci systemu logowania"""
    
    print("=== TEST SYSTEMU LOGOWANIA ===")
    
    # Test 1: Import modu≈Çu
    try:
        from modules.logging import AppLogger, get_logger, LogConfig
        print("‚úÖ Import modu≈Çu logowania - OK")
    except ImportError as e:
        print(f"‚ùå B≈ÇƒÖd importu: {e}")
        return False
    
    # Test 2: Konfiguracja
    try:
        AppLogger.setup()
        print("‚úÖ Konfiguracja systemu - OK")
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd konfiguracji: {e}")
        return False
    
    # Test 3: Tworzenie katalogu log√≥w
    try:
        LogConfig.ensure_log_dir()
        if os.path.exists(LogConfig.LOG_DIR):
            print(f"‚úÖ Katalog log√≥w utworzony: {LogConfig.LOG_DIR}")
        else:
            print(f"‚ùå Katalog log√≥w nie istnieje: {LogConfig.LOG_DIR}")
            return False
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd tworzenia katalogu: {e}")
        return False
    
    # Test 4: Pobieranie loggera i test logowania
    try:
        logger = get_logger('test.module')
        
        # Test r√≥≈ºnych poziom√≥w logowania
        logger.debug("Test wiadomo≈õci DEBUG")
        logger.info("Test wiadomo≈õci INFO")
        logger.warning("Test wiadomo≈õci WARNING")
        logger.error("Test wiadomo≈õci ERROR")
        logger.critical("Test wiadomo≈õci CRITICAL")
        
        print("‚úÖ Testowe logi zapisane")
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd logowania: {e}")
        return False
    
    # Test 5: Sprawdzenie czy plik logu zosta≈Ç utworzony
    try:
        log_file = LogConfig.get_log_filepath()
        if os.path.exists(log_file):
            file_size = os.path.getsize(log_file)
            print(f"‚úÖ Plik logu utworzony: {log_file} ({file_size} bajt√≥w)")
            
            # Poka≈º zawarto≈õƒá
            with open(log_file, 'r', encoding='utf-8') as f:
                content = f.read()
                print("\n--- ZAWARTO≈öƒÜ PLIKU LOGU ---")
                print(content)
                print("--- KONIEC ZAWARTO≈öCI ---\n")
        else:
            print(f"‚ùå Plik logu nie istnieje: {log_file}")
            return False
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd sprawdzania pliku: {e}")
        return False
    
    # Test 6: Test API endpoints (bez Flask context)
    try:
        from modules.logging.routers import logging_bp
        print("‚úÖ Import endpoints API - OK")
    except ImportError as e:
        print(f"‚ùå B≈ÇƒÖd importu API: {e}")
        return False
    
    print("\nüéâ WSZYSTKIE TESTY PRZESZ≈ÅY POMY≈öLNIE!")
    print(f"üìÅ Katalog log√≥w: {LogConfig.LOG_DIR}")
    print(f"üìÑ Aktualny plik logu: {LogConfig.get_log_filepath()}")
    return True

if __name__ == "__main__":
    test_logging_system()